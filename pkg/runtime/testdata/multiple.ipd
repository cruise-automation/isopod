# vim: set syntax=python:

apiextensionsv1beta1 = proto.package("k8s.io.apiextensions_apiserver.pkg.apis.apiextensions.v1beta1")
metav1 = proto.package("k8s.io.apimachinery.pkg.apis.meta.v1")
rbacv1 = proto.package("k8s.io.api.rbac.v1")

def install(ctx):
    kube.put(
        name="crontabs.stable.example.com",
        api_group="apiextensions.k8s.io",
        data=[
            apiextensionsv1beta1.CustomResourceDefinition(
                metadata=metav1.ObjectMeta(
                    name="crontabs.stable.example.com",
                ),
                spec=apiextensionsv1beta1.CustomResourceDefinitionSpec(
                    group="stable.example.com",
                    names=apiextensionsv1beta1.CustomResourceDefinitionNames(
                        plural="crontabs",
                        singular="crontab",
                        shortNames=[
                            "ct",
                        ],
                        kind="CronTab",
                    ),
                    scope="Namespaced",
                    validation=apiextensionsv1beta1.CustomResourceValidation(
                        openAPIV3Schema=apiextensionsv1beta1.JSONSchemaProps(
                            type="object",
                            properties={
                                "spec": apiextensionsv1beta1.JSONSchemaProps(
                                    type="object",
                                    properties={
                                        "cronSpec": apiextensionsv1beta1.JSONSchemaProps(
                                            type="string",
                                        ),
                                        "deepField": apiextensionsv1beta1.JSONSchemaProps(
                                            type="object",
                                            properties={
                                                "attribute1": apiextensionsv1beta1.JSONSchemaProps(
                                                    type="string",
                                                ),
                                                "attribute2": apiextensionsv1beta1.JSONSchemaProps(
                                                    type="integer",
                                                ),
                                                "attribute3": apiextensionsv1beta1.JSONSchemaProps(
                                                    type="boolean",
                                                )
                                            },
                                        ),
                                        "image": apiextensionsv1beta1.JSONSchemaProps(
                                            type="string",
                                        ),
                                        "replicas": apiextensionsv1beta1.JSONSchemaProps(
                                            type="integer",
                                        )
                                    },
                                )
                            },
                        )
                    ),
                    versions=[
                        apiextensionsv1beta1.CustomResourceDefinitionVersion(
                            name="v1",
                            served=True,
                            storage=True,
                        ),
                    ],
                ),
            )
        ]
    )

    data=struct(
        apiVersion="stable.example.com/v1",
        kind="CronTab",
        metadata=struct(
            name="test-custom-resource",
            namespace="default",
        ),
        spec=struct(
            cronSpec="test-spec",
            deepField=struct(
                attribute1="foo",
                attribute2=2,
                attribute3=True,
            ),
            image="test-image",
            replicas=1,
        ),
    )
    kube.put_yaml(
        name="test-custom-resource",
        namespace="default",
        data=[data.to_json()]
    )

    kube.put(
        name="test-cluster-view",
        api_group="rbac.authorization.k8s.io",
        data=[
            rbacv1.ClusterRoleBinding(
                metadata=metav1.ObjectMeta(
                    name="test-cluster-view",
                    labels={
                        "app": "test-app"
                    },
                ),
                subjects=[
                    rbacv1.Subject(
                        kind="ServiceAccount",
                        name="test",
                        namespace="default"
                    ),
                    rbacv1.Subject(
                        kind="ServiceAccount",
                        name="test2",
                        namespace="default"
                    ),
                ],
                roleRef=rbacv1.RoleRef(
                    apiGroup="rbac.authorization.k8s.io",
                    kind="ClusterRole",
                    name="test-cluster-view"
                )
            )
        ]
    )

def remove(ctx):
    kube.delete(customresourcedefinition="crontabs.stable.example.com", api_group="apiextensions.k8s.io")
    kube.delete(crontab="default/test-custom-resource", api_group="stable.example.com")
    kube.delete(clusterrolebinding="test-cluster-view", api_group="rbac.authorization.k8s.io")
